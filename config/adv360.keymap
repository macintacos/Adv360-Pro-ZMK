
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
              &kp GRAVE   &kp N1  &kp N2  &kp N3  &kp N4  &kp N5        &tog 1              &mo 2              &kp N6        &kp N7      &kp N8            &kp N9        &kp N0    &kp BACKSLASH
              &lt 4 TAB   &kp Q   &kp W   &kp E   &kp R   &kp T         &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp Y         &kp U       &kp I             &kp O         &kp P     &kp BACKSPACE
  &mt RIGHT_CONTROL ESC   &kp A   &kp S   &kp D   &kp F   &kp G         &mt RC(RALT) MINUS  &kp C_MUTE         &kp C_PREV    &kp C_NEXT  &kp C_PLAY_PAUSE  &kp EQUAL     &kp H     &kp J          &kp K       &kp L  &kp SEMI   &kp SQT
              &kp LSHFT   &kp Z   &kp X   &kp C   &kp V   &kp B         &none               &none              &kp C_BRI_UP  &none       &none             &kp C_VOL_UP  &none     &none          &kp N       &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt LEFT_SHIFT ENTER
 &kp LG(LA(RC(LSHIFT)))   &none   &none   &none   &none   &kp LEFT_GUI  &mo LEFT_ALT        &kp C_BRI_DN       &kp C_VOL_DN  &mo 3       &kp SPACE         &kp LEFT      &kp DOWN  &kp UP         &kp RIGHT   &mo 3
            >;
        };

        layer_keypad {
            bindings = <
          &none   &none   &none   &none   &none   &none   &tog 1   &none   &none  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY          &none
          &none   &none   &none   &none   &none   &none    &none   &none   &none   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS  &kp BACKSPACE
         &tog 1   &none   &none   &none   &none   &none    &none   &none   &none                                    &none            &none          &none      &none  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS  &kp SINGLE_QUOTE
 &kp LEFT_SHIFT   &none   &none   &none   &none   &none    &none   &none   &none       &none         &none          &none            &none          &none  &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER         &kp ENTER
          &none   &none   &none   &none   &none   &mo 3    &none   &none   &none       &none         &none       &kp LEFT         &kp DOWN         &kp UP  &kp RIGHT      &none
            >;
        };

        layer_mod {
            bindings = <
                &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4     &none                   &none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3            &bt BT_SEL 4  &none
                &none   &none         &none         &none         &none            &none            &bootloader             &bootloader  &none         &none         &none            &none                   &none         &none
                &tog 2  &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none         &bt BT_CLR    &bt BT_CLR       &rgb_ug RGB_MEFS_CMD 5  &none         &none   &none   &none   &none   &none
                &none   &none         &none         &none         &none            &none            &none                   &none        &none         &none         &none            &none                   &none         &none   &none   &none   &none   &none   &none   &none
                &none   &none         &none         &bl BL_INC    &bl BL_DEC       &rgb_ug RGB_TOG  &bl BL_TOG              &none        &none         &bl BL_TOG    &rgb_ug RGB_TOG  &bl BL_INC              &bl BL_DEC    &none   &none   &none
            >;
        };

        layer_extras {
            bindings = <
                &none   &kp LG(LS(N1))  &kp LG(LS(N2))   &kp LG(LS(N3))        &kp LG(LS(N4))    &kp LG(LS(N5))  &none   &none   &kp LG(LS(N6))  &kp LG(LS(N7))  &kp LG(LS(N8))  &kp LG(LS(N9))  &kp LG(LS(N0))  &none
                &none   &none           &none            &none                 &none             &none           &none   &none   &none           &none           &none           &none           &none           &none
                &tog 3  &none           &none            &kp LEFT_PARENTHESIS  &kp LEFT_BRACE    &kp UNDERSCORE  &none   &none   &none           &none           &none           &none           &kp EQUAL       &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &none             &none   &none
                &none   &none           &none            &none                 &kp LEFT_BRACKET  &kp MINUS       &none   &none   &none           &none           &none           &none           &none           &none            &kp PLUS               &kp RIGHT_BRACKET &none   &none   &none   &none
                &none   &none           &none            &none                 &none             &none           &none   &none   &none           &none           &none           &kp C_PREV      &kp C_VOL_DN    &kp C_VOL_UP     &kp C_NEXT             &none
            >;
        };

        layer_meh {
            bindings = <
 &kp LC(LS(LA(GRAVE)))  &kp LC(LS(LA(1)))  &kp LC(LS(LA(2)))  &kp LC(LS(LA(3)))  &kp LC(LS(LA(4)))  &kp LC(LS(LA(5))) &none  &none  &kp LC(LS(LA(N6)))  &kp LC(LS(LA(N7)))  &kp LC(LS(LA(N8)))     &kp LC(LS(LA(N9)))    &kp LC(LS(LA(N0)))    &kp LC(LS(LA(BACKSLASH)))
                 &none  &kp LC(LS(LA(Q)))  &kp LC(LS(LA(W)))  &kp LC(LS(LA(E)))  &kp LC(LS(LA(R)))  &kp LC(LS(LA(T))) &none  &none  &kp LC(LS(LA(Y)))   &kp LC(LS(LA(U)))   &kp LC(LS(LA(I)))      &kp LC(LS(LA(O)))     &kp LC(LS(LA(P)))     &kp LC(LS(LA(BACKSPACE)))
                &tog 4  &kp LC(LS(LA(A)))  &kp LC(LS(LA(S)))  &kp LC(LS(LA(D)))  &kp LC(LS(LA(F)))  &kp LC(LS(LA(G))) &none  &none  &none               &none               &none                  &none                 &kp LC(LS(LA(H)))     &kp LC(LS(LA(J)))          &kp LC(LS(LA(K)))      &kp LC(LS(LA(L)))  &kp LC(LS(LA(SEMICOLON)))  &kp LC(LS(LA(SINGLE_QUOTE)))
                 &none  &kp LC(LS(LA(Z)))  &kp LC(LS(LA(X)))  &kp LC(LS(LA(C)))  &kp LC(LS(LA(V)))  &kp LC(LS(LA(B))) &none  &none  &none               &none               &none                  &none                 &none                 &none                      &kp LC(LS(LA(N)))      &kp LC(LS(LA(M)))  &kp LC(LS(LA(COMMA)))      &kp LC(LS(LA(PERIOD)))        &kp LC(LS(LA(SLASH)))         &kp LC(LS(LA(ENTER)))
                 &none              &none              &none              &none              &none  &none             &none  &none  &none               &none               &kp LC(LS(LA(SPACE)))  &kp LC(LS(LA(LEFT)))  &kp LC(LS(LA(DOWN)))  &kp LC(LS(LA(UP)))         &kp LC(LS(LA(RIGHT)))  &none
            >;
        };

    };
};
